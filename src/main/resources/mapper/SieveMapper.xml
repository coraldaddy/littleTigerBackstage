<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lxw.addressbook.addressbook.mapper.SieveMapper">
  <resultMap id="BaseResultMap" type="lxw.addressbook.addressbook.domain.Sieve">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="jetton" jdbcType="VARCHAR" property="jetton" />
    <result column="highest" jdbcType="VARCHAR" property="highest" />
    <result column="quick_num" jdbcType="INTEGER" property="quickNum" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, jetton, highest
  </sql>
  <select id="selectByExample" parameterType="lxw.addressbook.addressbook.domain.SieveExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from lxw_sieve
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from lxw_sieve
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from lxw_sieve
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="lxw.addressbook.addressbook.domain.Sieve">
    insert into lxw_sieve (id, user_id, jetton, 
      highest)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{jetton,jdbcType=VARCHAR}, 
      #{highest,jdbcType=VARCHAR}, #{quickNum,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="lxw.addressbook.addressbook.domain.Sieve">
    insert into lxw_sieve
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="jetton != null">
        jetton,
      </if>
      <if test="highest != null">
        highest,
      </if>
      <if test="quickNum != null">
        quick_num,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="jetton != null">
        #{jetton,jdbcType=VARCHAR},
      </if>
      <if test="highest != null">
        #{highest,jdbcType=VARCHAR},
      </if>
      <if test="quickNum != null">
        #{quickNum,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update lxw_sieve
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.jetton != null">
        jetton = #{record.jetton,jdbcType=VARCHAR},
      </if>
      <if test="record.highest != null">
      highest = #{record.highest,jdbcType=VARCHAR},
    </if>
      <if test="record.quickNum != null">
        quick_num = #{record.quickNum,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update lxw_sieve
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      jetton = #{record.jetton,jdbcType=VARCHAR},
      highest = #{record.highest,jdbcType=VARCHAR},
      quick_num = #{record.quickNum,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="lxw.addressbook.addressbook.domain.Sieve">
    update lxw_sieve
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="jetton != null">
        jetton = #{jetton,jdbcType=VARCHAR},
      </if>
      <if test="highest != null">
        highest = #{highest,jdbcType=VARCHAR},
      </if>
      <if test="quickNum != null">
        quick_num = #{quickNum,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="lxw.addressbook.addressbook.domain.Sieve">
    update lxw_sieve
    set user_id = #{userId,jdbcType=INTEGER},
      jetton = #{jetton,jdbcType=VARCHAR},
      highest = #{highest,jdbcType=VARCHAR},
      quick_num = #{quickNum,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByOpenId" parameterType="java.lang.String" resultType="lxw.addressbook.addressbook.domain.Sieve">
    select
    ls.id id, ls.user_id userId, ls.jetton jetton, ls.highest highest, ls.quick_num quickNum
    from lxw_sieve ls
    left join lxw_user lu on lu.id = ls.user_id
    where lu.open_id = #{openId}
  </select>
  <update id="updateByUserId" parameterType="lxw.addressbook.addressbook.domain.Sieve">
    update lxw_sieve
    <set>
      <if test="jetton != null">
        jetton = #{jetton,jdbcType=VARCHAR},
      </if>
      <if test="highest != null">
        highest = #{highest,jdbcType=VARCHAR},
      </if>
      <if test="quickNum != null">
        quick_num = #{quickNum,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId}
  </update>
  <select id="chickRankingList" resultType="lxw.addressbook.addressbook.model.responce.ChickRankingListResponse">
    SELECT
	lu.name name,ls.highest score
    FROM
        lxw_sieve ls
    LEFT JOIN lxw_user lu ON lu.id = ls.user_id
    WHERE
    ls.highest is not null
    ORDER BY ls.highest ASC
    LIMIT 10
  </select>
</mapper>